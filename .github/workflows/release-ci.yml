name: npm - Release Prisma
run-name: npm - Release Prisma ${{ inputs.packageVersion }}${{ github.event.inputs.commitHash && '-' || '' }}${{ inputs.commitHash }}

on:
  workflow_dispatch:
    inputs:
      packageVersion:
        required: true
        description: 'Target package version'
      commitHash:
        required: false
        description: 'Target commit hash'

jobs:
  release:
    timeout-minutes: 10
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    outputs:
      PACKAGE_VERSION: ${{ steps.package-version.outputs.PACKAGE_VERSION }}

    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.commitHash }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          registry-url: https://npm.pkg.github.com
          scope: '@vetching-corporation'
          cache: 'pnpm'

      - name: Parse Package Version
        id: package-version
        run: |
          BASE_VERSION="${{ github.event.inputs.packageVersion }}"
          COMMIT_HASH="${{ github.event.inputs.commitHash }}"

          if [ -z "$COMMIT_HASH" ]; then
            echo "PACKAGE_VERSION=${BASE_VERSION}" >> $GITHUB_OUTPUT
          else
            echo "PACKAGE_VERSION=${BASE_VERSION}-${COMMIT_HASH}" >> $GITHUB_OUTPUT
          fi

      - name: Install jq
        uses: dcarbone/install-jq-action@v3

      - name: Set package version
        run: |
          PACKAGE_VERSION="${{ steps.package-version.outputs.PACKAGE_VERSION }}"

          CLIENT_DIR="packages/client"
          CLI_DIR="packages/cli"

          # Client package.json
          jq --arg version "$PACKAGE_VERSION" '.version=$version' "$CLIENT_DIR/package.json" > "$CLIENT_DIR/package-temp.json"
          mv "$CLIENT_DIR/package-temp.json" "$CLIENT_DIR/package.json"

          # CLI package.json
          jq --arg version "$PACKAGE_VERSION" '.version=$version' "$CLI_DIR/package.json" > "$CLI_DIR/package-temp.json"
          mv "$CLI_DIR/package-temp.json" "$CLI_DIR/package.json"

      - name: Publish all packages to npm
        id: publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          (
            cd packages/client && \
            pnpm install && \
            pnpm publish
          )
          (
            cd packages/cli && \
            pnpm install && \
            pnpm publish
          )

      - name: Print output
        env:
          THE_OUTPUT: '${{ toJson(steps.publish.outputs) }}'
        run: |
          echo "$THE_OUTPUT"

  # We also have `sendSlackMessage()` in publish.ts
  # It uses the #feed-prisma-releases channel and adds more information
  success:
    needs:
      - release
    if: ${{ success() }}
    name: Communicate success
    runs-on: ubuntu-latest
    steps:
      - name: Set current job url in SLACK_FOOTER env var
        run: echo "SLACK_FOOTER=<$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID|Click here to go to the job logs>" >> "$GITHUB_ENV"

      - name: Slack Notification on Success
        uses: rtCamp/action-slack-notify@v2.3.2
        env:
          SLACK_TITLE: 'Prisma Release ${{ needs.release.outputs.PACKAGE_VERSION }} succeeded :white_check_mark:'
          SLACK_COLOR: '#55ff55'
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}

  failure:
    needs:
      - release
    if: ${{ failure() }}
    name: Communicate failure
    runs-on: ubuntu-latest
    steps:
      - name: Set current job url in SLACK_FOOTER env var
        run: echo "SLACK_FOOTER=<$GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID|Click here to go to the job logs>" >> "$GITHUB_ENV"

      - name: Slack Notification on Failure
        uses: rtCamp/action-slack-notify@v2.3.2
        env:
          SLACK_TITLE: 'Prisma Release ${{ needs.release.outputs.PACKAGE_VERSION }} failed :x:'
          SLACK_COLOR: '#FF0000'
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_URL }}
